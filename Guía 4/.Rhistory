derivada_parcial_alpha <- function(alpha, lambda, datos, n) {
return(n * (digamma(alpha) - log(lambda)) + sum(log(datos)))
}
derivada_parcial_lambda <- function(alpha, lambda, datos, n) {
return(-sum(datos) + n * alpha / lambda)
}
newton_raphson <- function(datos, i) {
n <- length(datos)  # Obtener n
alpha_mom <- mean(datos)^2 / var(datos)
lambda_mom <- mean(datos) / var(datos)
alpha <- alpha_mom
lambda <- lambda_mom
for (iter in 1:i) {
d_alpha_val <- derivada_parcial_alpha(alpha, lambda, datos, n)
d_lambda_val <- derivada_parcial_lambda(alpha, lambda, datos, n)
incremento_alpha <- d_alpha_val / optimize(function(x) log_verosimilitud_gamma(c(x, lambda), datos), interval = c(0.001, 100))$objective
incremento_lambda <- d_lambda_val / optimize(function(x) log_verosimilitud_gamma(c(alpha, x), datos), interval = c(0.001, 100))$objective
alpha <- alpha - incremento_alpha
lambda <- lambda - incremento_lambda
}
return(c(alpha, lambda))
}
# Prueba con diferentes tamaños de muestra y repetir 10 veces
set.seed(456)
tamaños_muestra <- c(6, 10, 20, 40, 80, 200)
shape <- 3
rate <- 4
reps <- 5
# Vectores para almacenar los ECM
ECM_alpha_momentos <- c()
ECM_alpha_MV <- c()
ECM_lambda_momentos <- c()
ECM_lambda_MV <- c()
for (n in tamaños_muestra) {
error_cuadratico_medio_alpha_momentos <- 0
error_cuadratico_medio_alpha_MV <- 0
error_cuadratico_medio_lambda_momentos <- 0
error_cuadratico_medio_lambda_MV <- 0
for (k in 1:reps) {
datos <- rgamma(n, shape = shape, scale = 1/rate)
alpha_momentos <- mean(datos)^2 / var(datos)
lambda_momentos <- mean(datos) / var(datos)
estimador_MV <- newton_raphson(datos, i = 10)
error_cuadratico_medio_alpha_momentos <- error_cuadratico_medio_alpha_momentos + ((alpha_momentos - shape)^2)/reps
error_cuadratico_medio_alpha_MV <- error_cuadratico_medio_alpha_MV + ((rate - estimador_MV[1])^2)/reps
error_cuadratico_medio_lambda_momentos <- error_cuadratico_medio_lambda_momentos + ((shape - lambda_momentos)^2)/reps
error_cuadratico_medio_lambda_MV <- error_cuadratico_medio_lambda_MV + ((rate - estimador_MV[2])^2)/reps
}
# Guardar los ECM en los vectores
ECM_alpha_momentos <- c(ECM_alpha_momentos, error_cuadratico_medio_alpha_momentos)
ECM_alpha_MV <- c(ECM_alpha_MV, error_cuadratico_medio_alpha_MV)
ECM_lambda_momentos <- c(ECM_lambda_momentos, error_cuadratico_medio_lambda_momentos)
ECM_lambda_MV <- c(ECM_lambda_MV, error_cuadratico_medio_lambda_MV)
}
# Graficar los ECM
plot(tamaños_muestra, ECM_alpha_momentos, type = "b", col = "blue", xlab = "Tamaño de muestra", ylab = "ECM", main = "ECM para estimador de momentos (alpha)")
points(tamaños_muestra, ECM_alpha_MV, type = "b", col = "red")
points(tamaños_muestra, ECM_lambda_momentos, type = "b", col = "green")
points(tamaños_muestra, ECM_lambda_MV, type = "b", col = "purple")
legend("topright", legend = c("ECM_alpha_momentos", "ECM_alpha_MV", "ECM_lambda_momentos", "ECM_lambda_MV"), col = c("blue", "red", "green", "purple"), pch = c(1, 1, 1, 1))
?digamma
library(MASS)
set.seed(2024)
B <-1000
n <-500
muestra_original <- rexp(n, rate = 1)
quantile(muestra_original, 0.5)
T_media_original <- mean(muestra_original)
T_mediana_original <- median(muestra_original)
estimador_mediana <- c()
estimador_media <- c()
for (i in 1:B) {
Xboot <- sample(muestra_original, n, replace = TRUE)
mean_boot <- mean(Xboot)
median_boot <- median(Xboot)
estimador_media <- c(estimador_media, mean_boot)
estimador_mediana <- c(estimador_mediana, median_boot)
}
hist(estimador_media, freq = FALSE, col="darkorange" )
lines(density(estimador_media, kernel = "gauss", window = bw.ucv), col="purple", lwd = 3)
hist(estimador_mediana, freq = FALSE, col = "darkgreen")
lines(density(estimador_mediana, kernel = "epanechnikov", window = bw.ucv), col="darkblue", lwd = 3)
#Ahora, quiero calcular los I de C
#Mètodo 1: Intervalo Bootstrap noemL
int_de_confianza_metodo1 <- function(sd, estimador, alpha){
inferior <- mean(estimador) - qnorm(1 - alpha/2)*sd
superior <- mean(estimador) + qnorm(1 - alpha/2)*sd
return(c(inferior, superior))
}
error_est_media <- sd(estimador_media)
error_est_mediana <- sd(estimador_mediana)
int_de_confianza_metodo1(error_est_media, estimador_media, 1 - 0.95)
T_media_original
int_de_confianza_metodo1(error_est_mediana, estimador_mediana, 1 - 0.95)
T_mediana_original
library(MASS)
set.seed(2024)
B <-1000
n <-500
muestra_original <- rexp(n, rate = 1)
quantile(muestra_original, 0.5)
T_media_original <- mean(muestra_original)
T_mediana_original <- median(muestra_original)
estimador_mediana <- c()
estimador_media <- c()
for (i in 1:B) {
Xboot <- sample(muestra_original, n, replace = TRUE)
mean_boot <- mean(Xboot)
median_boot <- median(Xboot)
estimador_media <- c(estimador_media, mean_boot)
estimador_mediana <- c(estimador_mediana, median_boot)
}
hist(estimador_media, freq = FALSE, col="darkorange" )
lines(density(estimador_media, kernel = "gauss", window = bw.ucv), col="purple", lwd = 3)
hist(estimador_mediana, freq = FALSE, col = "darkgreen")
lines(density(estimador_mediana, kernel = "epanechnikov", window = bw.ucv), col="darkblue", lwd = 3)
#Ahora, quiero calcular los I de C
#Mètodo 1: Intervalo Bootstrap noemL
int_de_confianza_metodo1 <- function(sd, estimador, alpha){
inferior <- mean(estimador) - qnorm(1 - alpha/2)*sd
superior <- mean(estimador) + qnorm(1 - alpha/2)*sd
return(c(inferior, superior))
}
error_est_media <- sd(estimador_media)
error_est_mediana <- sd(estimador_mediana)
int_de_confianza_metodo1(error_est_media, estimador_media, 1 - 0.95)
T_media_original
int_de_confianza_metodo1(error_est_mediana, estimador_mediana, 1 - 0.95)
T_mediana_original
?percentile
?quantile
int_de_confianza_metodo2 <- function(estimador, alpha){
ordenar_medias <- sort(estimador)
inferior <- quantile(estimador, alpha/2)
superior <- quantile(estimador, 1 - alpha/2)
return(c(inferior, superior))
}
int_de_confianza_metodo2(estimador_media)
int_de_confianza_metodo2 <- function(estimador, alpha){
ordenar_medias <- sort(estimador)
inferior <- quantile(estimador, alpha/2)
superior <- quantile(estimador, 1 - alpha/2)
return(c(inferior, superior))
}
int_de_confianza_metodo2(estimador_media, 1 - 0.95)
int_de_confianza_metodo2(estimador_mediana, 1 - 0.95)
int_de_confianza_metodo2 <- function(estimador, alpha){
ordenar_medias <- sort(estimador)
inferior <- quantile(estimador, alpha/2)
superior <- quantile(estimador, 1 - alpha/2)
return(c(inferior, superior))
}
int_de_confianza_metodo2(estimador_media, 1 - 0.95)
T_media_original
int_de_confianza_metodo2(estimador_mediana, 1 - 0.95)
T_mediana_original
hist(estimador_media, freq = FALSE, col="darkorange" )
lines(density(estimador_media, kernel = "gauss", window = bw.ucv), col="purple", lwd = 3)
hist(estimador_mediana, freq = FALSE, col = "darkgreen")
lines(density(estimador_mediana, kernel = "epanechnikov", window = bw.ucv), col="blue", lwd = 3)
hist(estimador_media, freq = FALSE, col="darkorange" )
lines(density(estimador_media, kernel = "gauss", window = bw.ucv), col="purple", lwd = 3)
hist(estimador_mediana, freq = FALSE, col = "#72ff6e")
lines(density(estimador_mediana, kernel = "epanechnikov", window = bw.ucv), col="darkblue", lwd = 3)
hist(estimador_media, freq = FALSE, col="darkorange" )
lines(density(estimador_media, kernel = "gauss", window = bw.ucv), col="purple", lwd = 3)
hist(estimador_mediana, freq = FALSE, col = "lightgreen")
lines(density(estimador_mediana, kernel = "epanechnikov", window = bw.ucv), col="darkblue", lwd = 3)
?scan
dado <-  scan("2 2 4 6 1 3 1 3 2 4 4 4 4 4 6 3 3 4 1 2 1 6 3 2 3 4 1 1 5 4 1 4 6
4 1 2 1 5 4 3 3 1 3 1 6 5 1 3 2 3 6 2 4 2 6 6 5 2 4 4 1 4 3 1 2 1
6 1 1 3 1 6 6 1 2 6 1 1 4 5 4 1 5 2 2 1 6 6 1 2 1 3 1 3 3 4 3 3 3 5")
dado <-  scan("dado.txt")
setwd("~/Estadística/Guía 4")
dado <-  scan("dado.txt")
dado <-  scan("dado.txt")
?module
dado <-  scan("dado.txt")
n <- length(dado)
probabilidad_par_original <- 0
for (i in 1:n) {
if(dado[i]%%2==0){
probabilidad_par_original <- probabilidad_par_original + 1/n
}
}
probabilidad_par_original
B <- 5000
probabilidad_par_todas <- c()
for(i in 1:B){
muestra_boot <- sample(dado, n, replace = TRUE )
probabilidad_par <- 0
for(j in 1:n){
if(muestra_boot[j] %% 2 == 0){
probabilidad_par <- probabilidad_par + 1/n
}
}
probabilidad_par_todas <- c(probabilidad_par_todas, probabilidad_par)
}
head(probabilidad_par_todas)
probabilidad_par_original
head(probabilidad_par_todas)
#Ejercicio a
n <- length(dado)
probabilidad_par_original <- 0
for (i in 1:n) {
if(dado[i]%%2==0){
probabilidad_par_original <- probabilidad_par_original + 1/n
}
}
B <- 5000
probabilidad_par_todas <- c()
for(i in 1:B){
muestra_boot <- sample(dado, n, replace = TRUE)
probabilidad_par <- 0
for(j in 1:n){
if(muestra_boot[j] %% 2 == 0){
probabilidad_par <- probabilidad_par + 1/n
}
}
probabilidad_par_todas <- c(probabilidad_par_todas, probabilidad_par)
}
probabilidad_par_original
head(probabilidad_par_todas)
set.seed(2024)
dado <-  scan("dado.txt")
#Ejercicio a
n <- length(dado)
probabilidad_par_original <- 0
for (i in 1:n) {
if(dado[i]%%2==0){
probabilidad_par_original <- probabilidad_par_original + 1/n
}
}
B <- 5000
probabilidad_par_todas <- c()
for(i in 1:B){
muestra_boot <- sample(dado, n, replace = TRUE)
probabilidad_par <- 0
for(j in 1:n){
if(muestra_boot[j] %% 2 == 0){
probabilidad_par <- probabilidad_par + 1/n
}
}
probabilidad_par_todas <- c(probabilidad_par_todas, probabilidad_par)
}
probabilidad_par_original
head(probabilidad_par_todas)
hist(titas_bootstrap)
set.seed(2024)
dado <-  scan("dado.txt")
#Ejercicio a
n <- length(dado)
probabilidad_par_original <- 0
for (i in 1:n) {
if(dado[i]%%2==0){
probabilidad_par_original <- probabilidad_par_original + 1/n
}
}
B <- 5000
titas_bootstrap <- c()
for(i in 1:B){
muestra_boot <- sample(dado, n, replace = TRUE)
tita_boot <- 0
for(j in 1:n){
if(muestra_boot[j] %% 2 == 0){
tita_boot <- tita_boot + 1/n
}
}
titas_bootstrap <- c(titas_bootstrap, tita_boot)
}
probabilidad_par_original
head(titas_bootstrap)
hist(titas_bootstrap)
hist(titas_bootstrap, col = "darkorange")
lines(rnorm(5000))
hist(titas_bootstrap, col = "darkorange")
lines(density(titas_bootstrap, kernel = "gauss", window = bw.nrd0))
hist(titas_bootstrap, col = "darkorange", probability = TRUE)
lines(density(titas_bootstrap, kernel = "gauss", window = bw.nrd0))
hist(titas_bootstrap, col = "darkorange", probability = TRUE)
lines(density(titas_bootstrap, kernel = "gauss", window = bw.nrd0), lwd=3, col="purple")
hist(titas_bootstrap, col = "darkorange", probability = TRUE)
set.seed(2024)
dado <-  scan("dado.txt")
#Ejercicio a
n <- length(dado)
probabilidad_par_original <- 0
for (i in 1:n) {
if(dado[i]%%2==0){
probabilidad_par_original <- probabilidad_par_original + 1/n
}
}
B <- 5000
titas_bootstrap <- c()
for(i in 1:B){
muestra_boot <- sample(dado, n, replace = TRUE)
tita_boot <- 0
for(j in 1:n){
if(muestra_boot[j] %% 2 == 0){
tita_boot <- tita_boot + 1/n
}
}
titas_bootstrap <- c(titas_bootstrap, tita_boot)
}
probabilidad_par_original
head(titas_bootstrap)
hist(titas_bootstrap, col = "darkorange", probability = TRUE)
lines(density(titas_bootstrap, kernel = "gauss", window = bw.nrd0), lwd=3, col="purple")
points(probabilidad_par_original, lwd=5, col = "darkgreen")
'Sí, tiene forma acampanada con centro en la proba original, que es 0.48'
hist(titas_bootstrap, col = "darkorange", probability = TRUE)
lines(density(titas_bootstrap, kernel = "gauss", window = bw.nrd0), lwd=3, col="purple")
lines(probabilidad_par_original, lwd=5, col = "darkgreen")
'Sí, tiene forma acampanada con centro en la proba original, que es 0.48'
set.seed(2024)
dado <- scan("dado.txt")
# Ejercicio a
n <- length(dado)
probabilidad_par_original <- 0
for (i in 1:n) {
if (dado[i] %% 2 == 0) {
probabilidad_par_original <- probabilidad_par_original + 1/n
}
}
B <- 5000
titas_bootstrap <- c()
for (i in 1:B) {
muestra_boot <- sample(dado, n, replace = TRUE)
tita_boot <- 0
for (j in 1:n) {
if (muestra_boot[j] %% 2 == 0) {
tita_boot <- tita_boot + 1/n
}
}
titas_bootstrap <- c(titas_bootstrap, tita_boot)
}
# Crear histograma y resaltar la barra de probabilidad_par_original
hist(titas_bootstrap, col = ifelse(round(titas_bootstrap, 2) == round(probabilidad_par_original, 2), "red", "darkorange"), probability = TRUE)
lines(density(titas_bootstrap, kernel = "gauss", window = bw.nrd0), lwd = 3, col = "purple")
# Agregar una línea para la probabilidad original
abline(v = probabilidad_par_original, lwd = 5, col = "darkgreen")
# Leyenda para la línea y la barra resaltada
legend("topright", legend = c("Distribución Bootstrap", "Densidad Estimada", "Probabilidad Original"), lwd = c(0, 3, 5), col = c("darkorange", "purple", "darkgreen"), fill = c("darkorange", NA, NA), title = "Leyenda")
hist(titas_bootstrap, col = ifelse(round(titas_bootstrap, 2) == round(probabilidad_par_original, 2), "red", "darkorange"), probability = TRUE)
lines(density(titas_bootstrap, kernel = "gauss", window = bw.nrd0), lwd = 3, col = "purple")
hist(titas_bootstrap, col = "darkorange", probability = TRUE)
lines(density(titas_bootstrap, kernel = "gauss", window = bw.nrd0), lwd = 3, col = "purple")
abline(probabilidad_par_original, lwd = 5, col = "darkgreen")
hist(titas_bootstrap, col = "darkorange", probability = TRUE)
lines(density(titas_bootstrap, kernel = "gauss", window = bw.nrd0), lwd = 3, col = "purple")
abline(v = probabilidad_par_original, lwd = 5, col = "darkgreen")
legend("topright", legend = c("Distribución Bootstrap", "Densidad Estimada", "Probabilidad Original"), lwd = c(0, 3, 5), col = c("darkorange", "purple", "darkgreen"), fill = c("darkorange", NA, NA), title = "Leyenda")
sd(titas_bootstrap)
#Método 1
int_de_confianza_metodo1 <- function(sd, estimador, alpha){
inferior <- mean(estimador) - qnorm(1 - alpha/2)*sd
superior <- mean(estimador) + qnorm(1 - alpha/2)*sd
return(c(inferior, superior))
}
int_de_confianza_metodo1(error_titas, titas_bootstrap, 1 - 0.95)
error_titas <- sd(titas_bootstrap)
hist(titas_bootstrap, col = "darkorange", probability = TRUE)
lines(density(titas_bootstrap, kernel = "gauss", window = bw.nrd0), lwd = 3, col = "purple")
abline(v = probabilidad_par_original, lwd = 5, col = "darkgreen")
legend("topright", legend = c("Distribución Bootstrap", "Densidad Estimada", "Probabilidad Original"), lwd = c(0, 3, 5), col = c("darkorange", "purple", "darkgreen"), fill = c("darkorange", NA, NA), title = "Leyenda")
'Sí, tiene forma acampanada con centro en la proba original, que es 0.48'
#Método 1
int_de_confianza_metodo1 <- function(sd, estimador, alpha){
inferior <- mean(estimador) - qnorm(1 - alpha/2)*sd
superior <- mean(estimador) + qnorm(1 - alpha/2)*sd
return(c(inferior, superior))
}
int_de_confianza_metodo1(error_titas, titas_bootstrap, 1 - 0.95)
probabilidad_par_original
#Método 2:
int_de_confianza_metodo2 <- function(estimador, alpha){
ordenar_medias <- sort(estimador)
inferior <- quantile(estimador, alpha/2)
superior <- quantile(estimador, 1 - alpha/2)
return(c(inferior, superior))
}
int_de_confianza_metodo2(titas_bootstrap, 1 - 0.95)
T_media_original
int_de_confianza_metodo2(titas_bootstrap, 1 - 0.95)
probabilidad_par_original
int_de_confianza_metodo1(error_titas, titas_bootstrap, 1 - 0.95)
probabilidad_par_original
#Método 2:
int_de_confianza_metodo2 <- function(estimador, alpha){
ordenar_medias <- sort(estimador)
inferior <- quantile(estimador, alpha/2)
superior <- quantile(estimador, 1 - alpha/2)
return(c(inferior, superior))
}
int_de_confianza_metodo2(titas_bootstrap, 1 - 0.95)
probabilidad_par_original
probabilidad_cinco_original <- 0
for (i in 1:n) {
if (dado[i] == 5) {
probabilidad_cinco_original <- probabilidad_cinco_original + 1/n
}
}
titas_bootstrap_b <- c()
for (i in 1:B) {
muestra_boot_b <- sample(dado, n, replace = TRUE)
tita_boot <- 0
for (j in 1:n) {
if (muestra_boot_b[j] == 5) {
tita_boot <- tita_boot + 1/n
}
}
titas_bootstrap_b <- c(titas_bootstrap_b, tita_boot)
}
error_titas_b <- sd(titas_bootstrap_b)
hist(titas_bootstrap_b, col = "pink", probability = TRUE)
lines(density(titas_bootstrap_b, kernel = "gauss", window = bw.nrd0), lwd = 3, col = "purple")
abline(v = probabilidad_cinco_original, lwd = 5, col = "darkgreen")
legend("topright", legend = c("Distribución Bootstrap", "Densidad Estimada", "Probabilidad Original"), lwd = c(0, 3, 5), col = c("pink", "purple", "darkgreen"), fill = c("pink", NA, NA), title = "Leyenda")
'Sí, tiene forma acampanada con centro en la proba original, que es '
#Método 1
int_de_confianza_metodo1(error_titas_b, titas_bootstrap_b, 1 - 0.95)
probabilidad_cinco_original
#Método 2:
int_de_confianza_metodo2(titas_bootstrap_b, 1 - 0.95)
probabilidad_cinco_original
probabilidad_cinco_original <- 0
for (i in 1:n) {
if (dado[i] == 5) {
probabilidad_cinco_original <- probabilidad_cinco_original + 1/n
}
}
titas_bootstrap_b <- c()
for (i in 1:B) {
muestra_boot_b <- sample(dado, n, replace = TRUE)
tita_boot <- 0
for (j in 1:n) {
if (muestra_boot_b[j] == 5) {
tita_boot <- tita_boot + 1/n
}
}
titas_bootstrap_b <- c(titas_bootstrap_b, tita_boot)
}
error_titas_b <- sd(titas_bootstrap_b)
hist(titas_bootstrap_b, col = "pink", probability = TRUE)
lines(density(titas_bootstrap_b, kernel = "epanechnikov", window = bw.ucv), lwd = 3, col = "purple")
abline(v = probabilidad_cinco_original, lwd = 5, col = "darkgreen")
legend("topright", legend = c("Distribución Bootstrap", "Densidad Estimada", "Probabilidad Original"), lwd = c(0, 3, 5), col = c("pink", "purple", "darkgreen"), fill = c("pink", NA, NA), title = "Leyenda")
'Sí, tiene forma acampanada con centro en la proba original, que es '
#Método 1
int_de_confianza_metodo1(error_titas_b, titas_bootstrap_b, 1 - 0.95)
probabilidad_cinco_original
#Método 2:
int_de_confianza_metodo2(titas_bootstrap_b, 1 - 0.95)
probabilidad_cinco_original
probabilidad_cinco_original <- 0
for (i in 1:n) {
if (dado[i] == 5) {
probabilidad_cinco_original <- probabilidad_cinco_original + 1/n
}
}
titas_bootstrap_b <- c()
for (i in 1:B) {
muestra_boot_b <- sample(dado, n, replace = TRUE)
tita_boot <- 0
for (j in 1:n) {
if (muestra_boot_b[j] == 5) {
tita_boot <- tita_boot + 1/n
}
}
titas_bootstrap_b <- c(titas_bootstrap_b, tita_boot)
}
error_titas_b <- sd(titas_bootstrap_b)
hist(titas_bootstrap_b, col = "pink", probability = TRUE)
lines(density(titas_bootstrap_b, kernel = "rectangular", window = bw.ucv), lwd = 3, col = "purple")
abline(v = probabilidad_cinco_original, lwd = 5, col = "darkgreen")
legend("topright", legend = c("Distribución Bootstrap", "Densidad Estimada", "Probabilidad Original"), lwd = c(0, 3, 5), col = c("pink", "purple", "darkgreen"), fill = c("pink", NA, NA), title = "Leyenda")
'Sí, tiene forma acampanada con centro en la proba original, que es '
#Método 1
int_de_confianza_metodo1(error_titas_b, titas_bootstrap_b, 1 - 0.95)
probabilidad_cinco_original
#Método 2:
int_de_confianza_metodo2(titas_bootstrap_b, 1 - 0.95)
probabilidad_cinco_original
probabilidad_cinco_original <- 0
for (i in 1:n) {
if (dado[i] == 5) {
probabilidad_cinco_original <- probabilidad_cinco_original + 1/n
}
}
titas_bootstrap_b <- c()
for (i in 1:B) {
muestra_boot_b <- sample(dado, n, replace = TRUE)
tita_boot <- 0
for (j in 1:n) {
if (muestra_boot_b[j] == 5) {
tita_boot <- tita_boot + 1/n
}
}
titas_bootstrap_b <- c(titas_bootstrap_b, tita_boot)
}
error_titas_b <- sd(titas_bootstrap_b)
hist(titas_bootstrap_b, col = "pink", probability = TRUE)
lines(density(titas_bootstrap_b, kernel = "gauss", window = bw.ucv), lwd = 3, col = "purple")
abline(v = probabilidad_cinco_original, lwd = 5, col = "darkgreen")
legend("topright", legend = c("Distribución Bootstrap", "Densidad Estimada", "Probabilidad Original"), lwd = c(0, 3, 5), col = c("pink", "purple", "darkgreen"), fill = c("pink", NA, NA), title = "Leyenda")
'Sí, tiene forma acampanada con centro en la proba original, que es '
#Método 1
int_de_confianza_metodo1(error_titas_b, titas_bootstrap_b, 1 - 0.95)
probabilidad_cinco_original
#Método 2:
int_de_confianza_metodo2(titas_bootstrap_b, 1 - 0.95)
probabilidad_cinco_original
