return(se_boot)
}
intervalos_bootstrap <- list()
for (i in (1:4)){
se_boot <- estimar_se_mediana(grupos[[i]]$HIP.CIRCUMFERENCE)
intervalo_boot <- c(medianas[i] - 1.96 * se_boot , medianas[i] + 1.96 * se_boot)
intervalos_bootstrap[[i]] <- intervalo_boot
}
for (i in 1:4) {
cat("Intervalo de confianza bootstrap para grupo", i, ": [", round(intervalos_bootstrap[[i]][1], 2), ", ", round(intervalos_bootstrap[[i]][2], 2), "]\n")
}
# Preparar datos para ggplot
grupo_labels <- c("Grupo 1", "Grupo 2", "Grupo 3", "Grupo 4")
estadisticas <- data.frame(
Grupo = factor(grupo_labels, levels = grupo_labels),
Mediana = medianas,
IC_lower = sapply(intervalos_bootstrap, function(x) x[1]),
IC_upper = sapply(intervalos_bootstrap, function(x) x[2])
)
# Crear el gráfico con ggplot2
ggplot(estadisticas, aes(x = Grupo, y = Mediana)) +
geom_point() +
geom_errorbar(aes(ymin = IC_lower, ymax = IC_upper), width = 0.2) +
labs(title = "Mediana y intervalos de confianza de la circunferencia de la cadera por grupo etario",
x = "Grupo etario",
y = "Circunferencia de la cadera (mm)") +
theme_minimal()
# Preparar datos para ggplot
grupo_labels <- c("Grupo 1", "Grupo 2", "Grupo 3", "Grupo 4")
estadisticas <- data.frame(
Grupo = factor(grupo_labels, levels = grupo_labels),
Mediana = medianas,
IC_lower = sapply(intervalos_bootstrap, function(x) x[1]),
IC_upper = sapply(intervalos_bootstrap, function(x) x[2])
)
# Crear el gráfico con ggplot2
ggplot(estadisticas, aes(y = Grupo, x = Mediana)) +
geom_point(color = "darkblue", size = 3) +
geom_errorbarh(aes(xmin = IC_lower, xmax = IC_upper), height = 0, color = "darkblue", size = 1) +
labs(title = "Mediana y intervalos de confianza de la circunferencia de la cadera por grupo etario",
x = "Circunferencia de la cadera (mm)",
y = "Grupo etario") +
theme_minimal()
# Preparar datos para ggplot
grupo_labels <- c("Grupo 1", "Grupo 2", "Grupo 3", "Grupo 4")
estadisticas <- data.frame(
Grupo = factor(rep(grupo_labels, each = nrow(mujeres)/4), levels = grupo_labels),
Mediana = rep(medianas, each = nrow(mujeres)/4),
IC_lower = rep(sapply(intervalos_bootstrap, function(x) x[1]), each = nrow(mujeres)/4),
IC_upper = rep(sapply(intervalos_bootstrap, function(x) x[2]), each = nrow(mujeres)/4),
HIP_CIRCUMFERENCE = mujeres_ordenado$HIP.CIRCUMFERENCE
)
# Preparar datos para ggplot
grupo_labels <- c("Grupo 1", "Grupo 2", "Grupo 3", "Grupo 4")
estadisticas <- data.frame(
Grupo = factor(grupo_labels, levels = grupo_labels),
Mediana = medianas,
IC_lower = sapply(intervalos_bootstrap, function(x) x[1]),
IC_upper = sapply(intervalos_bootstrap, function(x) x[2])
)
# Crear el gráfico con ggplot2
ggplot(estadisticas, aes(y = Grupo, x = Mediana)) +
geom_point(color = "darkblue", size = 3) +
geom_errorbarh(aes(xmin = IC_lower, xmax = IC_upper), height = 0, color = "darkblue", size = 1) +
labs(title = "Mediana y intervalos de confianza de la circunferencia de la cadera por grupo etario",
x = "Circunferencia de la cadera (mm)",
y = "Grupo etario") +
theme_minimal()
Calcular las posiciones de las etiquetas para las barras de error y los puntos de datos individuales
#Calcular las posiciones de las etiquetas para las barras de error y los puntos de datos individuales
estadisticas$label_pos <- estadisticas$IC_upper + 10  # Posición de la etiqueta para las barras de error
#Crear un gráfico de puntos con barras de error y etiquetas
ggplot() +
# Puntos de datos individuales
geom_point(data = grupo_etario_1, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 1", nrow(grupo_etario_1))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_2, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 2", nrow(grupo_etario_2))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_3, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 3", nrow(grupo_etario_3))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_4, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 4", nrow(grupo_etario_4))), color = "gray", size = 2, alpha = 0.5) +
# Punto grande para la mediana
geom_point(data = estadisticas, aes(x = Mediana, y = Grupo), color = "darkblue", size = 2) +
# Barras de error horizontal
geom_errorbarh(data = estadisticas, aes(xmin = IC_lower, xmax = IC_upper, y = Grupo), height = 0.2, color = "darkblue") +
# Estilo y etiquetas del gráfico
labs(title = "Datos de circunferencia de cadera con mediana e intervalo de confianza por grupo etario",
x = "Circunferencia de la cadera (mm)",
y = "Grupo etario") +
theme_minimal()
#Calcular las posiciones de las etiquetas para las barras de error y los puntos de datos individuales
estadisticas$label_pos <- estadisticas$IC_upper + 10  # Posición de la etiqueta para las barras de error
#Crear un gráfico de puntos con barras de error y etiquetas
ggplot() +
# Puntos de datos individuales
geom_point(data = grupo_etario_1, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 1", nrow(grupo_etario_1))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_2, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 2", nrow(grupo_etario_2))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_3, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 3", nrow(grupo_etario_3))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_4, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 4", nrow(grupo_etario_4))), color = "gray", size = 2, alpha = 0.5) +
# Punto grande para la mediana
geom_point(data = estadisticas, aes(x = Mediana, y = Grupo), color = "darkblue", size = 2) +
# Barras de error horizontal
geom_errorbarh(data = estadisticas, aes(xmin = IC_lower, xmax = IC_upper, y = Grupo), height = 0.4, color = "darkblue") +
# Estilo y etiquetas del gráfico
labs(title = "Datos de circunferencia de cadera con mediana e intervalo de confianza por grupo etario",
x = "Circunferencia de la cadera (mm)",
y = "Grupo etario") +
theme_minimal()
#Calcular las posiciones de las etiquetas para las barras de error y los puntos de datos individuales
estadisticas$label_pos <- estadisticas$IC_upper + 10  # Posición de la etiqueta para las barras de error
#Crear un gráfico de puntos con barras de error y etiquetas
ggplot() +
# Puntos de datos individuales
geom_point(data = grupo_etario_1, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 1", nrow(grupo_etario_1))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_2, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 2", nrow(grupo_etario_2))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_3, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 3", nrow(grupo_etario_3))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_4, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 4", nrow(grupo_etario_4))), color = "gray", size = 2, alpha = 0.5) +
# Punto grande para la mediana
geom_point(data = estadisticas, aes(x = Mediana, y = Grupo), color = "darkblue", size = 2) +
# Barras de error horizontal
geom_errorbarh(data = estadisticas, aes(xmin = IC_lower, xmax = IC_upper, y = Grupo), height = 0.4, color = "darkblue", lwd = 3) +
# Estilo y etiquetas del gráfico
labs(title = "Datos de circunferencia de cadera con mediana e intervalo de confianza por grupo etario",
x = "Circunferencia de la cadera (mm)",
y = "Grupo etario") +
theme_minimal()
#Calcular las posiciones de las etiquetas para las barras de error y los puntos de datos individuales
estadisticas$label_pos <- estadisticas$IC_upper + 10  # Posición de la etiqueta para las barras de error
#Crear un gráfico de puntos con barras de error y etiquetas
ggplot() +
# Puntos de datos individuales
geom_point(data = grupo_etario_1, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 1", nrow(grupo_etario_1))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_2, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 2", nrow(grupo_etario_2))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_3, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 3", nrow(grupo_etario_3))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_4, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 4", nrow(grupo_etario_4))), color = "gray", size = 2, alpha = 0.5) +
# Punto grande para la mediana
geom_point(data = estadisticas, aes(x = Mediana, y = Grupo), color = "darkblue", size = 2) +
# Barras de error horizontal
geom_errorbarh(data = estadisticas, aes(xmin = IC_lower, xmax = IC_upper, y = Grupo), height = 0.4, color = "darkblue", lwd = 2) +
# Estilo y etiquetas del gráfico
labs(title = "Datos de circunferencia de cadera con mediana e intervalo de confianza por grupo etario",
x = "Circunferencia de la cadera (mm)",
y = "Grupo etario") +
theme_minimal()
#Calcular las posiciones de las etiquetas para las barras de error y los puntos de datos individuales
estadisticas$label_pos <- estadisticas$IC_upper + 10  # Posición de la etiqueta para las barras de error
#Crear un gráfico de puntos con barras de error y etiquetas
ggplot() +
# Puntos de datos individuales
geom_point(data = grupo_etario_1, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 1", nrow(grupo_etario_1))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_2, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 2", nrow(grupo_etario_2))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_3, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 3", nrow(grupo_etario_3))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_4, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 4", nrow(grupo_etario_4))), color = "gray", size = 2, alpha = 0.5) +
# Punto grande para la mediana
geom_point(data = estadisticas, aes(x = Mediana, y = Grupo), color = "darkblue", size = 2) +
# Barras de error horizontal
geom_errorbarh(data = estadisticas, aes(xmin = IC_lower, xmax = IC_upper, y = Grupo), height = 0.4, color = "darkblue", lwd = 1) +
# Estilo y etiquetas del gráfico
labs(title = "Datos de circunferencia de cadera con mediana e intervalo de confianza por grupo etario",
x = "Circunferencia de la cadera (mm)",
y = "Grupo etario") +
theme_minimal()
#Calcular las posiciones de las etiquetas para las barras de error y los puntos de datos individuales
estadisticas$label_pos <- estadisticas$IC_upper + 10  # Posición de la etiqueta para las barras de error
#Crear un gráfico de puntos con barras de error y etiquetas
ggplot() +
# Puntos de datos individuales
geom_point(data = grupo_etario_1, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 1", nrow(grupo_etario_1))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_2, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 2", nrow(grupo_etario_2))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_3, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 3", nrow(grupo_etario_3))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_4, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 4", nrow(grupo_etario_4))), color = "gray", size = 2, alpha = 0.5) +
# Punto grande para la mediana
geom_point(data = estadisticas, aes(x = Mediana, y = Grupo), color = "darkblue", size = 2) +
# Barras de error horizontal
geom_errorbarh(data = estadisticas, aes(xmin = IC_lower, xmax = IC_upper, y = Grupo), height = 0.4, color = "darkorange", lwd = 1) +
# Estilo y etiquetas del gráfico
labs(title = "Datos de circunferencia de cadera con mediana e intervalo de confianza por grupo etario",
x = "Circunferencia de la cadera (mm)",
y = "Grupo etario") +
theme_minimal()
#Calcular las posiciones de las etiquetas para las barras de error y los puntos de datos individuales
estadisticas$label_pos <- estadisticas$IC_upper + 10  # Posición de la etiqueta para las barras de error
#Crear un gráfico de puntos con barras de error y etiquetas
ggplot() +
# Puntos de datos individuales
geom_point(data = grupo_etario_1, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 1", nrow(grupo_etario_1))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_2, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 2", nrow(grupo_etario_2))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_3, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 3", nrow(grupo_etario_3))), color = "gray", size = 2, alpha = 0.5) +
geom_point(data = grupo_etario_4, aes(x = HIP.CIRCUMFERENCE, y = rep("Grupo 4", nrow(grupo_etario_4))), color = "gray", size = 2, alpha = 0.5) +
# Punto grande para la mediana
geom_point(data = estadisticas, aes(x = Mediana, y = Grupo), color = "darkorange", size = 2) +
# Barras de error horizontal
geom_errorbarh(data = estadisticas, aes(xmin = IC_lower, xmax = IC_upper, y = Grupo), height = 0.4, color = "darkblue", lwd = 1) +
# Estilo y etiquetas del gráfico
labs(title = "Datos de circunferencia de cadera con mediana e intervalo de confianza por grupo etario",
x = "Circunferencia de la cadera (mm)",
y = "Grupo etario") +
theme_minimal()
setwd("~/Estadística/Regresion_no _paramétrica")
setwd("~/Estadística/Regresion_no _paramétrica")
datos <- read.table("lidar.txt")
View(datos)
setwd("~/Estadística/Regresion_no _paramétrica")
datos <- read.table("lidar.txt", title = TRUE)
setwd("~/Estadística/Regresion_no _paramétrica")
datos <- read.table("lidar.txt", header = TRUE)
plot(datos$range, datos$logratio)
plot(datos$range, datos$logratio, col = "darkorange")
?rsmooth
?ksmooth
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = 5)
range <- datos$range
logratio <- datos$logratio
plot(range, logratio, col = "darkorange")
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = 5)
View(estimador_nadayara_watson)
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = 5)
plot(estimador_nadayara_watson[1], estimador_nadayara_watson[2])
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = 5)
plot(estimador_nadayara_watson[1], estimador_nadayara_watson[2])
estimadores_normales <- c(4)
for(i in 1:length(estimadores_normales)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = 5)
plot(estimador_nadayara_watson[1], estimador_nadayara_watson[2])
}
setwd("~/Estadística/Regresion_no _paramétrica")
datos <- read.table("lidar.txt", header = TRUE)
range <- datos$range
logratio <- datos$logratio
plot(range, logratio, col = "darkorange")
estimadores_normales <- c()
for(i in 1:length(estimadores_normales)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = 5)
plot(estimador_nadayara_watson[1], estimador_nadayara_watson[2])
}
estimadores_normales <- c()
for(i in 1:length(estimadores_normales)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = 5)
plot(estimador_nadayara_watson[, 1], estimador_nadayara_watson[, 2])
}
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = 5)
lines(estimador_nadayara_watson[1], estimador_nadayara_watson[2])
plot(range, logratio, col = "darkorange", xlab = "Range", ylab = "Logratio", main = "Estimador de Nadaraya-Watson")
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = 5)
lines(estimador_nadayara_watson$x, estimador_nadayara_watson$y, col = "blue", lwd = 2)
datos_originales <- plot(range, logratio, col = "darkorange", xlab = "Range", ylab = "Logratio", main = "Estimador de Nadaraya-Watson")
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = 5)
lines(estimador_nadayara_watson$x, estimador_nadayara_watson$y, col = "blue", lwd = 2)
setwd("~/Estadística/Regresion_no _paramétrica")
datos <- read.table("lidar.txt", header = TRUE)
range <- datos$range
logratio <- datos$logratio
plot(range, logratio, col = "black", xlab = "Range", ylab = "Logratio", main = "Estimador de Nadaraya-Watson")
ventanas <- c(5, 10, 30, 50)
colores <- c("red", "darkorange", "darkgreen", "darkblue")
for (i in 1:length(ventanas)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = ventanas[i])
lines(estimador_nadayara_watson$x, estimador_nadayara_watson$y, col = colores[i], lwd = 2)
}
#Para núcleo normal
ventanas <- c(5, 10, 30, 50)
colores <- c("red", "darkorange", "darkgreen", "darkblue")
plot(range, logratio, col = "black", xlab = "Range", ylab = "Logratio", main = "Estimador de Nadaraya-Watson con núcleo normal \n para
distintas ventanas")
for (i in 1:length(ventanas)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = ventanas[i])
lines(estimador_nadayara_watson$x, estimador_nadayara_watson$y, col = colores[i], lwd = 2)
}
#Núcelo epanechnikov
ventanas <- c(5, 10, 30, 50)
colores <- c("red", "darkorange", "darkgreen", "darkblue")
plot(range, logratio, col = "black", xlab = "Range", ylab = "Logratio", main = "Estimador de Nadaraya-Watson con núcleo epanechnikov \n para
distintas ventanas")
for (i in 1:length(ventanas)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = ventanas[i])
lines(estimador_nadayara_watson$x, estimador_nadayara_watson$y, col = colores[i], lwd = 2)
}
#Para núcleo normal
ventanas <- c(5, 10, 30, 50)
colores <- c("red", "darkorange", "darkgreen", "darkblue")
plot(range, logratio, col = "black", xlab = "Range", ylab = "Logratio", main = "Estimador de Nadaraya-Watson con núcleo normal \n para
distintas ventanas")
for (i in 1:length(ventanas)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = ventanas[i])
lines(estimador_nadayara_watson$x, estimador_nadayara_watson$y, col = colores[i], lwd = 2)
}
#Núcelo epanechnikov
ventanas <- c(5, 10, 30, 50)
colores <- c("red", "darkorange", "darkgreen", "darkblue")
plot(range, logratio, col = "black", xlab = "Range", ylab = "Logratio", main = "Estimador de Nadaraya-Watson con núcleo epanechnikov \n para
distintas ventanas")
for (i in 1:length(ventanas)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "epanechnikov", bandwidth = ventanas[i])
lines(estimador_nadayara_watson$x, estimador_nadayara_watson$y, col = colores[i], lwd = 2)
}
#Para núcleo normal
ventanas <- c(5, 10, 30, 50)
colores <- c("red", "darkorange", "darkgreen", "darkblue")
plot(range, logratio, col = "black", xlab = "Range", ylab = "Logratio", main = "Estimador de Nadaraya-Watson con núcleo normal \n para
distintas ventanas")
for (i in 1:length(ventanas)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = ventanas[i])
lines(estimador_nadayara_watson$x, estimador_nadayara_watson$y, col = colores[i], lwd = 2)
}
#Núcelo rectangular
ventanas <- c(5, 10, 30, 50)
colores <- c("red", "darkorange", "darkgreen", "darkblue")
plot(range, logratio, col = "black", xlab = "Range", ylab = "Logratio", main = "Estimador de Nadaraya-Watson con núcleo epanechnikov \n para
distintas ventanas")
for (i in 1:length(ventanas)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "box", bandwidth = ventanas[i])
lines(estimador_nadayara_watson$x, estimador_nadayara_watson$y, col = colores[i], lwd = 2)
}
setwd("~/Estadística/Regresion_no _paramétrica")
datos <- read.table("lidar.txt", header = TRUE)
range <- datos$range
logratio <- datos$logratio
#Para núcleo normal
ventanas <- c(5, 10, 30, 50)
colores <- c("red", "darkorange", "darkgreen", "darkblue")
plot(range, logratio, col = "black", xlab = "Range", ylab = "Logratio", main = "Estimador de Nadaraya-Watson con núcleo normal \n para
distintas ventanas")
for (i in 1:length(ventanas)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = ventanas[i])
lines(estimador_nadayara_watson$x, estimador_nadayara_watson$y, col = colores[i], lwd = 2)
}
#Núcelo rectangular
ventanas <- c(5, 10, 30, 50)
colores <- c("red", "darkorange", "darkgreen", "darkblue")
plot(range, logratio, col = "black", xlab = "Range", ylab = "Logratio", main = "Estimador de Nadaraya-Watson con núcleo rectangular \n para
distintas ventanas")
for (i in 1:length(ventanas)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "box", bandwidth = ventanas[i])
lines(estimador_nadayara_watson$x, estimador_nadayara_watson$y, col = colores[i], lwd = 2)
}
setwd("~/Estadística/Regresion_no _paramétrica")
datos <- read.table("lidar.txt", header = TRUE)
range <- datos$range
logratio <- datos$logratio
#Para núcleo normal
ventanas <- c(5, 10, 30, 50)
colores <- c("red", "darkorange", "darkgreen", "darkblue")
plot(range, logratio, col = "black", xlab = "Range", ylab = "Logratio", main = "Estimador de Nadaraya-Watson con núcleo normal para
distintas ventanas")
for (i in 1:length(ventanas)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = ventanas[i])
lines(estimador_nadayara_watson$x, estimador_nadayara_watson$y, col = colores[i], lwd = 2)
}
#Núcelo rectangular
ventanas <- c(5, 10, 30, 50)
colores <- c("red", "darkorange", "darkgreen", "darkblue")
plot(range, logratio, col = "black", xlab = "Range", ylab = "Logratio", main = "Estimador de Nadaraya-Watson con núcleo rectangular para
distintas ventanas")
for (i in 1:length(ventanas)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "box", bandwidth = ventanas[i])
lines(estimador_nadayara_watson$x, estimador_nadayara_watson$y, col = colores[i], lwd = 2)
}
#Para CV, primero separo los datos en train y test
cv_error <- function(h, range, logratio) {
cantidad_de_folds <- length(logratio)
cv <- rep(0, cantidad_de_folds)
for (i in 1:cantidad_de_folds) {
xi <- range[-i]
yi <- logratio[-i]
fit <- ksmooth(xi, yi, kernel = "normal", bandwidth = h, x.points = range[i])
cv[i] <- (logratio[i] - fit$logratio)^2
}
return(mean(cv))
}
h_optimos <- seq(3, 165, by = 1)
valores_del_error_h_optimo <- sapply(h_optimos, cv_error, range, logratio)
cv_error <- function(h, x, y) {
cantidad_de_folds <- length(y)
cv <- rep(0, cantidad_de_folds)
for (i in 1:cantidad_de_folds) {
xi <- x[-i]
yi <- y[-i]
fit <- ksmooth(xi, yi, kernel = "normal", bandwidth = h, x.points = x[i])
cv[i] <- (y[i] - fit$y)^2
}
return(mean(cv))
}
h_optimos <- seq(3, 165, by = 1)
valores_del_error_h_optimo <- sapply(h_optimos, cv_error, x = range, y = logratio)
h_optimo <- h_optimos[which.min(valores_del_error_h_optimo)]
# Graficar h vs. CV(h)
plot(h_optimos, valores_del_error_h_optimo, type = "l", col = "blue", lwd = 2,
xlab = "h (Ventana)", ylab = "CV(h)", main = "Validación cruzada para seleccionar h óptimo")
abline(v = h_optimo, col = "red", lty = 2)
# Imprimir la ventana óptima
print(paste("La ventana óptima es:", h_optimo))
set.seed(2024)
setwd("~/Estadística/Regresion_no _paramétrica")
datos <- read.table("lidar.txt", header = TRUE)
range <- datos$range
logratio <- datos$logratio
#Para núcleo normal
ventanas <- c(5, 10, 30, 50)
colores <- c("red", "darkorange", "darkgreen", "darkblue")
plot(range, logratio, col = "black", xlab = "Range", ylab = "Logratio", main = "Estimador de Nadaraya-Watson con núcleo normal para
distintas ventanas")
for (i in 1:length(ventanas)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "normal", bandwidth = ventanas[i])
lines(estimador_nadayara_watson$x, estimador_nadayara_watson$y, col = colores[i], lwd = 2)
}
#núcelo rectangular
ventanas <- c(5, 10, 30, 50)
colores <- c("red", "darkorange", "darkgreen", "darkblue")
plot(range, logratio, col = "black", xlab = "Range", ylab = "Logratio", main = "Estimador de Nadaraya-Watson con núcleo rectangular para
distintas ventanas")
for (i in 1:length(ventanas)){
estimador_nadayara_watson <- ksmooth(range, logratio, kernel = "box", bandwidth = ventanas[i])
lines(estimador_nadayara_watson$x, estimador_nadayara_watson$y, col = colores[i], lwd = 2)
}
#parte de cross validation
cv_error <- function(h, x, y) {
cantidad_de_folds <- length(y)
cv <- rep(0, cantidad_de_folds)
for (i in 1:cantidad_de_folds) {
xi <- x[-i]
yi <- y[-i]
fit <- ksmooth(xi, yi, kernel = "normal", bandwidth = h, x.points = x[i])
cv[i] <- (y[i] - fit$y)^2
}
return(mean(cv))
}
h_optimos <- seq(3, 165, by = 1)
valores_del_error_h_optimo <- sapply(h_optimos, cv_error, x = range, y = logratio)
h_optimo <- h_optimos[which.min(valores_del_error_h_optimo)]
plot(h_optimos, valores_del_error_h_optimo, type = "l", col = "blue", lwd = 2,
xlab = "h (Ventana)", ylab = "CV(h)", main = "Validación cruzada para seleccionar h óptimo")
abline(v = h_optimo, col = "red", lty = 2)
print(paste("La ventana óptima es:", h_optimo))
setwd("~/Estadística/TP_final")
attach(mujeres)
setwd("~/Estadística/TP_final")
library(ggplot2)
datos <- read.csv("individuals.csv", sep = ";")
mujeres <- subset(datos, SEX == 2)
mujeres <- subset(mujeres, HIP.CIRCUMFERENCE != 0 & BUTTOCK.KNEE.LENGTH != 0)
plot(mujeres$HIP.CIRCUMFERENCE, mujeres$BUTTOCK.KNEE.LENGTH, main = "Diagrama de dispersión de \n Circunferencia de la cadera vs longitud del fémur",
xlab = "Circunferencia de la cadera (mm)", ylab = "Longitud del fémur (mm)", col = "purple")
mujeres_ordenado <- mujeres[order(mujeres$AGE.IN.MONTHS), ]
grupo_etario_1  <- mujeres_ordenado[1:466, ]
grupo_etario_2 <-  mujeres_ordenado[467:932, ]
grupo_etario_3 <-  mujeres_ordenado[933:1399, ]
grupo_etario_4<-  mujeres_ordenado[1400:1866, ]
grupos <- list(grupo_etario_1, grupo_etario_2, grupo_etario_3, grupo_etario_4)
medianas <- numeric(length(grupos))
for (i in 1:length(grupos)) {
medianas[i] <- median(grupos[[i]]$HIP.CIRCUMFERENCE)
}
for (i in 1:4) {
cat("Mediana grupo", i, ":" ,medianas[i], "\n")
}
estimar_se_mediana <- function(datos, B = 1000) {
theta_boot <- numeric(B)
for (i in 1:B) {
n <- length(datos)
datos_boot <- sample(datos, n, replace = TRUE)
theta_boot[i] <- median(datos_boot)
}
se_boot <- sqrt(mean((theta_boot - mean(theta_boot))^2))  # Desviación estándar de las medianas bootstrap
return(se_boot)
}
intervalos_bootstrap <- list()
for (i in (1:4)){
se_boot <- estimar_se_mediana(grupos[[i]]$HIP.CIRCUMFERENCE)
intervalo_boot <- c(medianas[i] - 1.96 * se_boot , medianas[i] + 1.96 * se_boot)
intervalos_bootstrap[[i]] <- intervalo_boot
}
for (i in 1:4) {
cat("Intervalo de confianza bootstrap para grupo", i, ": [", round(intervalos_bootstrap[[i]][1], 2), ", ", round(intervalos_bootstrap[[i]][2], 2), "]\n")
}
estadisticas$label_pos <- estadisticas$IC_upper + 10  # Posición de la etiqueta para las barras de error
setwd("~/Estadística/TP_final")
library(ggplot2)
datos <- read.csv("individuals.csv", sep = ";")
mujeres <- subset(datos, SEX == 2)
mujeres <- subset(mujeres, HIP.CIRCUMFERENCE != 0 & BUTTOCK.KNEE.LENGTH != 0)
plot(mujeres$HIP.CIRCUMFERENCE, mujeres$BUTTOCK.KNEE.LENGTH, main = "Diagrama de dispersión de \n Circunferencia de la cadera vs longitud del fémur",
xlab = "Circunferencia de la cadera (mm)", ylab = "Longitud del fémur (mm)", col = "purple")
mujeres_ordenado <- mujeres[order(mujeres$AGE.IN.MONTHS), ]
grupo_etario_1  <- mujeres_ordenado[1:466, ]
grupo_etario_2 <-  mujeres_ordenado[467:932, ]
grupo_etario_3 <-  mujeres_ordenado[933:1399, ]
grupo_etario_4<-  mujeres_ordenado[1400:1866, ]
grupos <- list(grupo_etario_1, grupo_etario_2, grupo_etario_3, grupo_etario_4)
medianas <- numeric(length(grupos))
for (i in 1:length(grupos)) {
medianas[i] <- median(grupos[[i]]$HIP.CIRCUMFERENCE)
}
for (i in 1:4) {
cat("Mediana grupo", i, ":" ,medianas[i], "\n")
}
estimar_se_mediana <- function(datos, B = 1000) {
theta_boot <- numeric(B)
for (i in 1:B) {
n <- length(datos)
datos_boot <- sample(datos, n, replace = TRUE)
theta_boot[i] <- median(datos_boot)
}
se_boot <- sqrt(mean((theta_boot - mean(theta_boot))^2))  # Desviación estándar de las medianas bootstrap
return(se_boot)
}
intervalos_bootstrap <- list()
for (i in (1:4)){
se_boot <- estimar_se_mediana(grupos[[i]]$HIP.CIRCUMFERENCE)
intervalo_boot <- c(medianas[i] - 1.96 * se_boot , medianas[i] + 1.96 * se_boot)
intervalos_bootstrap[[i]] <- intervalo_boot
}
for (i in 1:4) {
cat("Intervalo de confianza bootstrap para grupo", i, ": [", round(intervalos_bootstrap[[i]][1], 2), ", ", round(intervalos_bootstrap[[i]][2], 2), "]\n")
}
estadisticas$label_pos <- estadisticas$IC_upper + 10  # Posición de la etiqueta para las barras de error
