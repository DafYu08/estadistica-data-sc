5+7
abs(-17)
x <- 12
x]5
x+5
y <- c(-12, 6, 0, -1)
2*y
abs(y)
installed.packages()
install.packages("tidyverse")
library(tidyverse)
view("Titanic")
view(Titanic)
?Titanic
?mean
glimpse(Titanic)
?filter
filter(Titanic, sex = 'Female')
installed.packages()
?filter
filter(Titanic, sex = 'Female')
library(tidyverse)
library(dplyr)
view(Titanic)
?Titanic
?mean
glimpse(Titanic) #Podemos conocer cuáles son las categoías con las que cuenta
?filter
filter(Titanic, sex = 'Female')
?filter
filter(Titanic, sex = 'Female')
?filter
filter(mpg, cty >= 20)
mpg_ford <- filter(mpg, manufacturar == 'ford')
mpg_ford <- filter(mpg, manufacturar == "ford")
mpg_ford <- filter(mpg, manufacturer == "ford")
View(mpg_ford)
mpg_metric <- mutate(mpg, cty_metric = 0.425144 * cty)
glimpse(mpg_metric)
source("~/.active-rstudio-document", echo=TRUE)
mpg_metric <- mpg %>%
mutate(cty_metric = 0.425144 * cty)
group_by(class) %>%
summarise(mean(cty))
mpg %>%
group_by(class) %>%
summarise(mean(cty), median(cty))
ggplot(mpg, aes(x = cty)) + geom_histogram()
ggplot(mpg, aes(x = cty,
y = hwy))
ggplot(mpg, aes(x = cty,
y = hwy)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(mpg, aes(x = cty,
y = hwy,
color = class)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(mpg, aes(x = cty,
y = hwy,
color = class)) +
geom_point() +
geom_smooth(method = "lm") +
scale_color_brewer(palette = "Dark2")
'
Guia 1
Dafne Yudcovsky
'
library("ggplot2")
library("aplpack")
#--------------Ejercicio 1--------------------
Debernardi <- read.csv("Debernardi.csv")
setwd("~/Estadística/Guía 1")
'
Guia 1
Dafne Yudcovsky
'
library("ggplot2")
library("aplpack")
#--------------Ejercicio 1--------------------
Debernardi <- read.csv("Debernardi.csv")
names(Debernardi)
View(Debernardi)
#Convierto los datos a factor para que sean clases
diagnosis <- factor(Debernardi$diagnosis, levels = c("1","2","3"))
levels(diagnosis)
tablaDiagnosis <- table(diagnosis)/sum(table(diagnosis)) #frecuencia relativa
barplot(tablaDiagnosis, col = c("green", "violet", "orange"), ylab = "Frecuencia Relativa", xlab = "Diagnosis")
tablaDiagnosisAbs <- table(diagnosis)
barplot(tablaDiagnosisAbs, col = c("green", "violet", "orange"), ylab = "Frecuencia", xlab = "Diagnosis")
#---------------Ejercicio 2---------------------
#2A
titanic <-read.csv("datos_titanic.csv")
View(titanic)
#Tomamos el sub df de los que sobrevivieron
sobrevivientes <- titanic[titanic$Survived == "1", ]
mujeres_sobrevivientes <- sobrevivientes[sobrevivientes$Sex == "female", ]
# Calcular la proporción de mujeres que sobrevivieron
proba_mujer_sobrevive <- nrow(mujeres_sobrevivientes) / nrow(sobrevivientes)
print(proba_mujer_sobrevive)
#Ahora calculamos la probabilidad de ser mujer
mujeres <- titanic[titanic$Sex == "female", ]
proba_mujer <- nrow(mujeres) / nrow(titanic)
print(proba_mujer)
#Mostramos ambas probabilidades
probabilidades <- c(proba_mujer_sobrevive, proba_mujer)
nombres <- c("Probabilidad de sobrevivir y ser mujer", "Probabilidad de ser mujer")
# Crear el gráfico de barras
barplot(probabilidades, names.arg = nombres, col = c("violet", "pink"),
ylim = c(0, 1), main = "Comparación de Probabilidades")
#2B
contingencia <- table(titanic$Survived, titanic$Pclass)
sobrevivir_primera <- contingencia[2,1]/sum(contingencia[, 1])
sobrevivir_segunda <- contingencia[2,2]/sum(contingencia[, 2])
sobrevivir_tercera <- contingencia[2,3]/sum(contingencia[, 3])
proba_por_clase <- c(sobrevivir_primera, sobrevivir_segunda, sobrevivir_tercera)
labels <- c("Sobrevivir en primera", "Sobrevivir en segunda", "Sobrevivir en tercera")
barplot(proba_por_clase, names.arg = labels,
ylim = c(0, 1), main = "Comparación de Probabilidades")
#2C
barplot(contingencia, col= c("red","green"), names.arg = c("Primera", "Segunda", "Tercera"),
main="Supervivencia por Clase",legend = c("No", "Si"),args.legend = list(x = "topleft"))
#---------------Ejercicio 3----------------------------
iridio <- read.table("iridio.txt", header = TRUE)
rodio <-read.table("rodio.txt", header = TRUE)
comparacion <- list(iridio$iridio, rodio$rodio)
nombres <- c("Iridio", "Rodio")
boxplot(comparacion, names = nombres, col = c("blue", "green"),
ylab = "Valor", xlab = "Elemento",
main = "Boxplot de Iridio y Rodio")
comparacion_num <- unlist(comparacion)
hist(comparacion_num, ylim = c(0, 25), main = "Frecuencias Absolutas")
hist(comparacion_num, probability = TRUE, main = "Frecuencias Relativas")
promedios <-  c(mean(iridio$iridio) ,mean(rodio$rodio))
barplot(promedios, names.arg = c("iridio", "rodio"), main = "Promedio")
medianas <-  c(median(iridio$iridio) ,median(rodio$rodio))
barplot(medianas, names.arg = c("iridio", "rodio"), main = "Mediana")
podadas <-  c(mean(iridio$iridio, trim = 0.2) ,mean(rodio$rodio, trim = 0.2))
barplot(podadas, names.arg = c("iridio", "rodio"), main = "0.2-Podadas")
#Hallar los desvíos estándares, las distancias intercuartiles y las MAD muestrales como medidas de dispersión.
sd(rodio$rodio)
sd(iridio$iridio)
IQR(iridio$iridio)
quantile(rodio$rodio , 0.75 , type=1) - quantile(rodio$rodio , 0.25 , type=1)
mad(rodio$rodio)
mad(iridio$iridio)
mad_AMano <- function(v, m){
diferencias <- 0
for (i in v) {
diferencias <- diferencias + abs(i-m)
}
return(diferencias / length(v))
}
print(mad_AMano(rodio$rodio, median(rodio$rodio)))
#----------------Ejercicio 5 -------------------------
'
a) Estudiar si la distribuci´on de los conjuntos de datos para ambos grupos es normal,
realizando los correspondientes histogramas y superponiendo la curva normal. Adem´as
dibujar los qqplots para cada conjunto de datos superponiendo, en otro color, la recta
mediante el comando qqline.
'
estudiantes <- read.table("estudiantes.txt", header = TRUE )
#---GRUPO1---
hist(estudiantes$GRUPO1, probability = TRUE, col = 'lightblue',
main = 'Histograma con Distribución Normal', xlab = "Valores")
#Tengo que calcular media y desviacion para poder superponer una normal acorde a los datos
media <- mean(estudiantes$GRUPO1)
desviacion <- sd(estudiantes$GRUPO1)
x <- seq(min(estudiantes$GRUPO1), max(estudiantes$GRUPO1), length.out = 100)
y <- dnorm(x, mean = media, sd = desviacion)
# Superponer la curva de densidad normal al histograma
lines(x, y, col = 'violet', lwd = 3)
print("La distribucion de la estimacion que obtuvimos de los datos para el estimador
se asemeja bastante a una normal.")
#---GRUPO2---
hist(estudiantes$GRUPO2, probability = TRUE, col = 'pink',
main = 'Histograma con Distribución Normal', xlab = "valores")
#Tengo que calcular media y desviacion para poder superponer una normal acorde a los datos
media <- mean(estudiantes$GRUPO2)
desviacion <- sd(estudiantes$GRUPO2)
x <- seq(min(estudiantes$GRUPO2), max(estudiantes$GRUPO2), length.out = 100)
y <- dnorm(x, mean = media, sd = desviacion)
# Superponer la curva de densidad normal al histograma
lines(x, y, col = 'red', lwd = 3)
print("La distribucion de la estimacion que obtuvimos de los datos para el estimador
se asemeja ligeramente a una normal, aunque los datos del centro se desvian
mucho de serlo, por lo que quiza con otra estimacion el estimador se parezca
mas a una normal.")
#Realizamos los qqplots
qqnorm(estudiantes$GRUPO1, col = "purple", lwd = 2, main = "Grupo1")
qqline(estudiantes$GRUPO1, col = "#FF5E0E", lwd = 4)
qqnorm(estudiantes$GRUPO2, col = "purple", lwd = 2,  main = "Grupo2")
qqline(estudiantes$GRUPO2, col = "#FF5E0E", lwd = 4)
print("En este caso, parece ser que el GRUPO2 se aproxima mucho mas a una normal que el GRUPO1")
'
Si miramos la media y la mediana en ambas muestras, el grupo 1 tiene menor media y mediana que el grupo2.
Aparte, el rango de valores del grupo 1 es mucho mas acotado.
Por otro lado, la desviacion estandar del grupo 2 es cuatro veces mayor al grupo 1.
Como ni las medidas de centralidad ni de dispersion se asemejan, no parecen estar midiendo las mismas cosas.
'
comparacion <- list(estudiantes$GRUPO1, estudiantes$GRUPO2)
nombres <- c("GRUPO1", "GRUPO2")
boxplot(comparacion, names = nombres, col = c("blue", "green"),
main = "Boxplot de Iridio y Rodio", ylab = "Concentracion de ion nitrato (en µg/l)")
means <- tapply(estudiantes$GRUPO1, estudiantes$GRUPO2, mean)
points(means, pch=20)
#Lo mismo pero mas lindo en ggplot (para ver como es la conversion)
df <- data.frame(
Grupo = rep(c("GRUPO1", "GRUPO2"), each = length(estudiantes$GRUPO1)),
Valor = c(estudiantes$GRUPO1, estudiantes$GRUPO2)
)
# Crear el boxplot con ggplot2
ggplot(df, aes(x = Grupo, y = Valor, fill = Grupo)) +
geom_boxplot() +
labs(
title = "Boxplot de GRUPO1 y GRUPO2",
y = "Concentracion de ion nitrato (en µg/l)"
) +
stat_summary(fun.y=mean, geom="point", shape=23, size=4)
#---------Ejercicio6---------------- Clase 26/3
nubes <- read.table("nubes.txt", header = TRUE)
View(nubes)
View(nubes)
nubes <- read.table("nubes.txt", header = TRUE)
View(nubes)
ggplot(nubes, aes(x = c("nubes controles", "nubes tratadas"), y = Valor, fill = categoria)) +
geom_boxplot() +
labs(
title = "Comparacion",
) +
stat_summary(fun.y=mean, geom="point", shape=23, size=4)
ggplot(df, aes(x = c("nubes controles", "nubes tratadas"), y = Valor, fill = categoria)) +
geom_boxplot() +
labs(
title = "Comparacion",
) +
stat_summary(fun.y=mean, geom="point", shape=23, size=4)
ggplot(nubes, aes(x = c("nubes controles", "nubes tratadas"), y = Valor, fill = categoria)) +
geom_boxplot() +
labs(
title = "Comparacion",
) +
stat_summary(fun.y=mean, geom="point", shape=23, size=4)
ggplot(nubes, aes(x = c("nubes controles", "nubes tratadas"), fill = categoria)) +
geom_boxplot() +
labs(
title = "Comparacion",
) +
stat_summary(fun.y=mean, geom="point", shape=23, size=4)
ggplot(nubes, aes(x = c("nubes controles", "nubes tratadas"))) +
geom_boxplot() +
labs(
title = "Comparacion",
) +
stat_summary(fun.y=mean, geom="point", shape=23, size=4)
?ggplot2-boxplot
?boxplot
df <- data.frame(
Grupo = rep(c("Nubes control", "Nubes tratadas"), each = length(nubes$CONTROLES)),
Valor = c(nubes$CONTROLES, nubes$TRATADAS)
)
ggplot(df, aes(x = Grupo, y = Valor, fill = Grupo)) +
geom_boxplot() +
labs(
title = "Comparacion control con tratadas",
y = "Cantidad de lluvia (mm)"
) +
stat_summary(fun.y=mean, geom="point", shape=23, size=4)
ggplot(df, aes(x = Grupo, y = Valor, fill = Grupo)) +
geom_boxplot(ylim(c(0, 2000))) +
labs(
title = "Comparacion control con tratadas",
y = "Cantidad de lluvia (mm)"
) +
stat_summary(fun.y=mean, geom="point", shape=23, size=4)
ggplot(df, aes(x = Grupo, y = Valor, fill = Grupo, ylim(c(0, 2000)))) +
geom_boxplot() +
labs(
title = "Comparacion control con tratadas",
y = "Cantidad de lluvia (mm)"
) +
stat_summary(fun.y=mean, geom="point", shape=23, size=4)
ggplot(df, aes(x = Grupo, y = Valor, fill = Grupo, ylim = c(0, 2000))) +
geom_boxplot() +
labs(
title = "Comparacion control con tratadas",
y = "Cantidad de lluvia (mm)"
) +
stat_summary(fun.y=mean, geom="point", shape=23, size=4)
stat_summary(fun.y=mean, geom="point", shape=23, size=4)
ggplot(df, aes(x = Grupo, y = Valor, fill = Grupo)) +
geom_boxplot() +
labs(
title = "Comparacion control con tratadas",
y = "Cantidad de lluvia (mm)"
) +
stat_summary(fun.y=mean, geom="point", shape=23, size=4)
qqplot(nubes0)
qqplot(nubes)
qqplot(nubes$CONTROLES)
?qqplot
ggplot(nubes, aes(sample = nubes$CONTROLES)) +
stat_qq() +
stat_qq_line() +
labs(title = "QQplot de CONTROLES",
x = "Cuantiles teóricos",
y = "Cuantiles observados") +
theme_minimal()
# QQplot de la columna "nubes1"
ggplot(nubes, aes(sample = nubes$CONTROLES)) +
stat_qq() +
stat_qq_line() +
labs(title = "QQplot de CONTROLES",
x = "Cuantiles teóricos",
y = "Cuantiles observados")
ggplot(nubes, aes(sample = nubes$TRATADAS)) +
stat_qq() +
stat_qq_line() +
labs(title = "QQplot de TRATADAS",
x = "Cuantiles teóricos",
y = "Cuantiles observados")
ggplot(nubes, aes(sample = nubes$TRATADAS)) +
stat_qq() +
stat_qq_line() +
qqnorm() +
labs(title = "QQplot de TRATADAS",
x = "Cuantiles teóricos",
y = "Cuantiles observados")
# QQplot de la columna "nubes1"
ggplot(nubes, aes(sample = nubes$CONTROLES)) +
stat_qq() +
stat_qq_line() +
labs(title = "QQplot de CONTROLES",
x = "Cuantiles teóricos",
y = "Cuantiles observados")
ggplot(nubes, aes(sample = nubes$TRATADAS)) +
stat_qq() +
stat_qq_line() +
qqnorm() +
labs(title = "QQplot de TRATADAS",
x = "Cuantiles teóricos",
y = "Cuantiles observados")
ggplot(nubes, aes(sample = nubes$TRATADAS)) +
stat_qq() +
stat_qq_line() +
qqnorm(nubes$TRATADAS) +
labs(title = "QQplot de TRATADAS",
x = "Cuantiles teóricos",
y = "Cuantiles observados")
ggplot(nubes, aes(sample = nubes$TRATADAS)) +
stat_qq() +
stat_qq_line() +
qqnorm(nubes$TRATADAS) +
labs(title = "QQplot de TRATADAS",
x = "Cuantiles teóricos",
y = "Cuantiles observados")
ggplot(nubes, aes(sample = nubes$TRATADAS)) +
stat_qq() +
stat_qq_line() +
qqnorm(nubes$TRATADAS) +
labs(title = "QQplot de TRATADAS",
x = "Cuantiles teóricos",
y = "Cuantiles observados")
qqnorm(estudiantes$GRUPO2, col = "purple", lwd = 2,  main = "Grupo2")
ggplot(nubes, aes(sample = nubes$TRATADAS)) +
stat_qq() +
stat_qq_line() +
qqline(nubes$TRATADAS) +
labs(title = "QQplot de TRATADAS",
x = "Cuantiles teóricos",
y = "Cuantiles observados")
hist(nubes$TRATADAS, probability = TRUE, col = 'pink',
main = 'Histograma con Distribución Normal', xlab = "valores")
#Tengo que calcular media y desviacion para poder superponer una normal acorde a los datos
media <- mean(nubes$TRATADAS)
desviacion <- sd(nubes$TRATADAS)
x <- seq(min(nubes$TRATADAS), max(nubes$TRATADAS), length.out = 100)
y <- dnorm(x, mean = media, sd = desviacion)
# Superponer la curva de densidad normal al histograma
lines(x, y, col = 'red', lwd = 3)
print("NO TIENE DISTRIBUCION NORMAL")
leyend("NO TIENE DISTRIBUCION NORMAL")
legend("NO TIENE DISTRIBUCION NORMAL", legend = levels(nubes$TRATADAS))
legend("NO TIENE DISTRIBUCION NORMAL")
legend("NO TIENE DISTRIBUCION NORMAL", legend = levels(nubes$TRATADAS))
log_nubes_tratadas <- log(nubes$TRATADAS)
log_nubes_tratadas <- log(nubes$TRATADAS)
hist(log_nubes_tratadas, probability = TRUE, col = 'violet',
main = 'Histograma con Distribución Normal', xlab = "valores")
media <- mean(log_nubes_tratadas)
desviacion <- sd(log_nubes_tratadas)
x <- seq(min(log_nubes_tratadas), max(log_nubes_tratadas, length.out = 100))
y <- dnorm(x, mean = media, sd = desviacion)
lines(x, y, col = 'red', lwd = 3)
log_nubes_controles <- log(nubes$CONTROLES)
hist(log_nubes_controles, probability = TRUE, col = 'violet',
main = 'Histograma con Distribución Normal', xlab = "valores")
media <- mean(log_nubes_controles)
desviacion <- sd(log_nubes_controles)
x <- seq(min(log_nubes_controles), max(log_nubes_controles, length.out = 100))
y <- dnorm(x, mean = media, sd = desviacion)
lines(x, y, col = 'red', lwd = 3) #####DOOOOOOOOOOOOOOOOUUUUUUUUUUUUUUUUUU
comparacion <- list(log_nubes_controles, log_nubes_tratadas)
nombres <- c("log(CONTROLES)", "log(TRATADAS)")
boxplot(comparacion, names = nombres, col = c("blue", "green"),
main = "controles vs tratadas")
means <- tapply(log_nubes_controles, log_nubes_tratadas, mean)
points(means, pch=20)
comparacion <- list(log_nubes_controles, log_nubes_tratadas)
nombres <- c("log(CONTROLES)", "log(TRATADAS)")
boxplot(comparacion, names = nombres, col = c("blue", "green"),
main = "controles vs tratadas", ylim = c(0,10))
means <- tapply(log_nubes_controles, log_nubes_tratadas, mean)
points(means, pch=20)
n=200
datos=rnorm(n)
(xbar=mean(datos))
(desvt=sd(datos))
datosNormalizados=(datos-xbar)/desvt
ft=function(x){pt(x,df=2)}
plot(pnorm,from=-5,to=5,col="red",lwd=3)
plot(ft,from=-5,to=5,col="magenta",lwd=3,add=TRUE,lty=2)
ECDF=ecdf(datosNormalizados)
plot(ECDF,col="blue",lwd=1,xlab="datos",ylab="",add=TRUE)
datos=nubes$CONTROLES
(xbar=mean(datos))
(desvt=sd(datos))
datosNormalizados=(datos-xbar)/desvt
ft=function(x){pt(x,df=2)}
plot(pnorm,from=-5,to=5,col="red",lwd=3)
plot(ft,from=-5,to=5,col="magenta",lwd=3,add=TRUE,lty=2)
ECDF=ecdf(datosNormalizados)
plot(ECDF,col="blue",lwd=1,xlab="datos",ylab="",add=TRUE)
datos= log_nubes_controles
(xbar=mean(datos))
(desvt=sd(datos))
datosNormalizados=(datos-xbar)/desvt
ft=function(x){pt(x,df=2)}
plot(pnorm,from=-5,to=5,col="red",lwd=3)
plot(ft,from=-5,to=5,col="magenta",lwd=3,add=TRUE,lty=2)
ECDF=ecdf(datosNormalizados)
plot(ECDF,col="blue",lwd=1,xlab="datos",ylab="",add=TRUE)
datos= log_nubes_tratadas
(xbar=mean(datos))
(desvt=sd(datos))
datosNormalizados=(datos-xbar)/desvt
ft=function(x){pt(x,df=2)}
plot(pnorm,from=-5,to=5,col="red",lwd=3)
plot(ft,from=-5,to=5,col="magenta",lwd=3,add=TRUE,lty=2)
ECDF=ecdf(datosNormalizados)
plot(ECDF,col="blue",lwd=1,xlab="datos",ylab="",add=TRUE)
datos= nubes$TRATADAS
(xbar=mean(datos))
(desvt=sd(datos))
datosNormalizados=(datos-xbar)/desvt
ft=function(x){pt(x,df=2)}
plot(pnorm,from=-5,to=5,col="red",lwd=3)
plot(ft,from=-5,to=5,col="magenta",lwd=3,add=TRUE,lty=2)
ECDF=ecdf(datosNormalizados)
plot(ECDF,col="blue",lwd=1,xlab="datos",ylab="",add=TRUE)
proba <- sum(nubes$CONTROLES[nubes$CONTROLES < 40]) / sum(nubes)
sum(nubes$CONTROLES[nubes$CONTROLES < 40])
xnum(nubes$CONTROLES[nubes$CONTROLES < 40])
proba <- length(nubes$CONTROLES[nubes$CONTROLES < 40]) / nrow(nubes) * ncol(nubes)
(nrow(nubes) * ncol(nubes))
length(nubes$CONTROLES[nubes$CONTROLES < 40])
proba <- length(nubes$CONTROLES[nubes$CONTROLES < 40]) / (nrow(nubes) * ncol(nubes))
print(probabilidad_menor_40)
proba <- length(nubes$CONTROLES[nubes$CONTROLES < 40]) / (nrow(nubes) * ncol(nubes))
print(proba) #hashtag
