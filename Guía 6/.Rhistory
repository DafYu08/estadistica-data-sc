}
hist(p_valores)
set.seed(2024)
n <- 25
p_valores <- c()
for(i in 1:1000){
datita <- rnorm(n,10,3)
testeo <- t.test(datita, y = NULL,
alternative = c("two.sided"),
mu = 10,
conf.level = 0.95)
p_valores <- c(p_valores, testeo$p.value)
}
hist(p_valores)
set.seed(2024)
n <- 25
p_valores <- c()
for(i in 1:1000){
datita <- rnorm(n,10,3)
testeo <- t.test(datita, y = NULL,
alternative = c("two.sided"),
mu = 10,
conf.level = 0.95)
p_valores <- c(p_valores, testeo$p.value)
}
hist(p_valores, col = 'g')
set.seed(2024)
n <- 25
p_valores <- c()
for(i in 1:1000){
datita <- rnorm(n,10,3)
testeo <- t.test(datita, y = NULL,
alternative = c("two.sided"),
mu = 10,
conf.level = 0.95)
p_valores <- c(p_valores, testeo$p.value)
}
hist(p_valores, col = 'green')
set.seed(2024)
n <- 25
p_valores <- c()
for(i in 1:1000){
datita <- rnorm(n,10,3)
testeo <- t.test(datita, y = NULL,
alternative = c("two.sided"),
mu = 10,
conf.level = 0.95)
p_valores <- c(p_valores, testeo$p.value)
}
hist(p_valores, col = 'darkgreen')
#Pareciera que el p-valor se distribuye como una uniforme
set.seed(2024)
n <- 25
p_valores <- c()
for(i in 1:1000){
datita <- rnorm(n,10,3)
testeo <- t.test(datita, y = NULL,
alternative = c("two.sided"),
mu = 10,
conf.level = 0.90)
p_valores <- c(p_valores, testeo$p.value)
}
hist(p_valores, col = 'darkgreen')
#Pareciera que el p-valor se distribuye como una uniforme
set.seed(2024)
n <- 25
p_valores <- c()
for(i in 1:1000){
datita <- rnorm(n,10,3)
testeo <- t.test(datita, y = NULL,
alternative = c("two.sided"),
mu = 10,
conf.level = 0.95)
p_valores <- c(p_valores, testeo$p.value)
}
hist(p_valores, col = 'darkgreen')
#Pareciera que el p-valor se distribuye como una uniforme
#¿Cómo se distribuye el p-valor?
set.seed(2024)
n <- 25
p_valores <- c()
for(i in 1:1000){
datita <- rnorm(n,10,3)
testeo <- t.test(datita, y = NULL,
alternative = c("two.sided"),
mu = 10,
conf.level = 0.95)
p_valores <- c(p_valores, testeo$p.value)
}
hist(p_valores, col = 'darkgreen', freq = TRUE)
#Pareciera que el p-valor se distribuye como una uniforme
#¿Cómo se distribuye el p-valor?
set.seed(2024)
n <- 25
p_valores <- c()
for(i in 1:1000){
datita <- rnorm(n,10,3)
testeo <- t.test(datita, y = NULL,
alternative = c("two.sided"),
mu = 10,
conf.level = 0.95)
p_valores <- c(p_valores, testeo$p.value)
}
hist(p_valores, col = 'darkgreen', freq = FALSE)
#Pareciera que el p-valor se distribuye como una uniforme
#¿Cómo se distribuye el p-valor?
set.seed(2024)
n <- 25
p_valores <- c()
for(i in 1:1000){
datita <- rnorm(n,10,3)
testeo <- t.test(datita, y = NULL,
alternative = c("two.sided"),
mu = 10,
conf.level = 0.95)
p_valores <- c(p_valores, testeo$p.value)
}
hist(p_valores, col = 'darkgreen', freq = TRUE)
#Pareciera que el p-valor se distribuye como una uniforme
# Estimar la probabilidad de rechazar H0 para alpha = 0.05 y alpha = 0.10
prob_rechazo_05 <- mean(p_valores < 0.05)
prob_rechazo_10 <- mean(p_valores < 0.10)
print(prob_rechazo_05)
print(prob_rechazo_10)
?abs
dias <- c(747, 766, 749, 741, 714, 659, 624)
res_test <- c()
for(i in length(dias)){
if (abs(-1/7 + dias[i]/5000) > 0.686){
res_test <- c(res_test, 1)
} else{
res_test <- c(res_test, 0)
}
}
res_test
dias <- c(747, 766, 749, 741, 714, 659, 624)
res_test <- c()
for(i in length(dias)){
if (abs(-1/7 + dias[i]/5000) > 0.686){
res_test <- c(res_test, 1)
} else{
res_test <- c(res_test, 1)
}
}
res_test
dias <- c(747, 766, 749, 741, 714, 659, 624)
res_test <- c()
for(i in length(dias)){
if (abs(-1/7 + dias[i]/5000) > 0.686){
res_test <- c(res_test, 1)
} else{
res_test <- c(res_test, 1)
}
}
res_test
dias <- c(747, 766, 749, 741, 714, 659, 624)
res_test <- c()
for(i in length(dias)){
if (abs(-1/7 + dias[i]/5000) > 0.686){
res_test <- c(res_test, 1)
} else{
res_test <- c(3)
}
}
res_test
dias <- c(747, 766, 749, 741, 714, 659, 624)
res_test <- c()
for(i in length(dias)){
if (abs(-1/7 + dias[i]/5000) > 0.259){
res_test <- c(res_test, 1)
} else{
res_test <- c(res_test, 0)
}
}
res_test
if (abs(-1/7 + dias[1]/5000) > 0.259){
res_test <- c(res_test, 1)
} else{
res_test <- c(res_test, 0)
}
res_test
set.seed(2024)
# Totales por día de la semana
dias <- c(747, 766, 749, 741, 714, 659, 624)
n <- 5000
theta_0 <- 1/7
# Inicializar vector para resultados del test
res_test <- c()
z_values <- c()
# Calcular Z y p-valor para cada día
for(i in 1:length(dias)) {
proporción_observada <- dias[i] / n
z_value <- (proporción_observada - theta_0) / sqrt((theta_0 * (1 - theta_0)) / n)
z_values <- c(z_values, z_value)
# Valor crítico para alpha = 0.05 en dos colas es aproximadamente 1.96
valor_critico <- 1.96
if (abs(z_value) > valor_critico) {
res_test <- c(res_test, 1)  # Rechazar H0
} else {
res_test <- c(res_test, 0)  # No rechazar H0
}
}
# Imprimir resultados
res_test
z_values
set.seed(2024)
# Totales por día de la semana
dias <- c(747, 766, 749, 741, 714, 659, 624)
n <- 5000
theta_0 <- 1/7
# Inicializar vector para resultados del test y p-valores
res_test <- c()
z_values <- c()
p_values <- c()
# Calcular Z y p-valor para cada día
for(i in 1:length(dias)) {
proporción_observada <- dias[i] / n
z_value <- (proporción_observada - theta_0) / sqrt((theta_0 * (1 - theta_0)) / n)
z_values <- c(z_values, z_value)
p_value <- 2 * (1 - pnorm(abs(z_value)))
p_values <- c(p_values, p_value)
# Valor crítico para alpha = 0.05 en dos colas
if (p_value < 0.05) {
res_test <- c(res_test, 1)  # Rechazar H0
} else {
res_test <- c(res_test, 0)  # No rechazar H0
}
}
# Imprimir resultados
res_test
z_values
p_values
#Para el inciso c, nos preguntan cuál es el nivel de significación que tiene que tener el test phi para que rechace
#si alguno de los días da que rechazamos
min(p_values)
nivel_significacion_phi <- min(p_values)
nivel_significacion_phi
set.seed(2024)
dias <- c(747, 766, 749, 741, 714, 659, 624)
n <- 5000
theta_0 <- 1/7
res_test <- c()
z_values <- c()
p_values <- c()
for(i in 1:length(dias)) {
proporción_observada <- dias[i] / n
z_value <- (proporción_observada - theta_0) / sqrt((theta_0 * (1 - theta_0)) / n)
z_values <- c(z_values, z_value)
p_value <- 2 * (1 - pnorm(abs(z_value)))
p_values <- c(p_values, p_value)
if (p_value < 0.05) {
res_test <- c(res_test, 1)  # Rechazar H0
} else {
set.seed(2024)
dias <- c(747, 766, 749, 741, 714, 659, 624)
n <- 5000
theta_0 <- 1/7
res_test <- c()
z_values <- c()
p_values <- c()
for(i in 1:length(dias)) {
proporción_observada <- dias[i] / n
z_value <- (proporción_observada - theta_0) / sqrt((theta_0 * (1 - theta_0)) / n)
z_values <- c(z_values, z_value)
p_value <- 2 * (1 - pnorm(abs(z_value)))
p_values <- c(p_values, p_value)
if (p_value < 0.05) {
res_test <- c(res_test, 1)  # Rechazar H0
} else {
res_test <- c(res_test, 0)  # No rechazar H0
}
}
res_test
p_values
#Para el inciso c, nos preguntan cuál es el nivel de significación que tiene que tener el test phi para que rechace
#si alguno de los días da que rechazamos
nivel_significacion_phi <- min(p_values)
nivel_significacion_phi
set.seed(2024)
dias <- c(747, 766, 749, 741, 714, 659, 624)
n <- 5000
theta_0 <- 1/7
res_test <- c()
z_values <- c()
p_values <- c()
for(i in 1:length(dias)) {
proporción_observada <- dias[i] / n
z_value <- (proporción_observada - theta_0) / sqrt((theta_0 * (1 - theta_0)) / n)
z_values <- c(z_values, z_value)
p_value <- 2 * (1 - pnorm(abs(z_value)))
p_values <- c(p_values, p_value)
if (p_value < 0.05) {
res_test <- c(res_test, 1)  # Rechazar H0
} else {
res_test <- c(res_test, 0)  # No rechazar H0
}
}
res_test
p_values
#Para el inciso c, nos preguntan cuál es el nivel de significación que tiene que tener el test phi para que rechace
#si alguno de los días da que rechazamos
nivel_significacion_phi <- min(p_values)
nivel_significacion_phi
res_test
p_values
set.seed(2024)
dias <- c(747, 766, 749, 741, 714, 659, 624)
n <- 5000
theta_0 <- 1/7
res_test <- c()
z_values <- c()
p_values <- c()
for(i in 1:length(dias)) {
proporción_observada <- dias[i] / n
z_value <- (proporción_observada - theta_0) / sqrt((theta_0 * (1 - theta_0)) / n)
z_values <- c(z_values, z_value)
p_value <- 2 * (1 - pnorm(abs(z_value)))
p_values <- c(p_values, p_value)
if (p_value < 0.05) {
res_test <- c(res_test, 1)  # Rechazar H0
} else {
res_test <- c(res_test, 0)  # No rechazar H0
}
}
print(res_test)
print(p_values)
#Para el inciso c, nos preguntan cuál es el nivel de significación que tiene que tener el test phi para que rechace
#si alguno de los días da que rechazamos
nivel_significacion_phi <- min(p_values)
nivel_significacion_phi
set.seed(2024)
dias <- c(747, 766, 749, 741, 714, 659, 624)
n <- 5000
theta_0 <- 1/7
res_test <- c()
z_values <- c()
p_values <- c()
for(i in 1:length(dias)) {
proporción_observada <- dias[i] / n
z_value <- (proporción_observada - theta_0) / sqrt((theta_0 * (1 - theta_0)) / n)
z_values <- c(z_values, z_value)
p_value <- 2 * (1 - pnorm(abs(z_value)))
p_values <- c(p_values, p_value)
if (p_value < 0.05) {
res_test <- c(res_test, 1)  # Rechazar H0
} else {
res_test <- c(res_test, 0)  # No rechazar H0
}
}
print(res_test)
print(p_values)
#Para el inciso c, nos preguntan cuál es el nivel de significación que tiene que tener el test phi para que rechace
#si alguno de los días da que rechazamos
nivel_significacion_phi <- min(p_values)
nivel_significacion_phi
if (p_value < 0.05) {
res_test <- c(res_test, 1)  # Rechazar H0
} else {
res_test <- c(res_test, 0)  # No rechazar H0
}
?cars
View(cars)
df = read.csv(cars)
df = read.csv('cars')
df = read.table('cars')
df = cars
autos = cars
plot(cars_df$wt, cars_df$mpg,
main = "Diagrama de Dispersión de MPG vs Peso",
xlab = "Peso del Vehículo (1000 lbs)",
ylab = "Millas por Galón (MPG)",
pch = 19,  # Tipo de punto, 19 es un círculo sólido
col = "blue")  # Color de los puntos
autos = cars
plot(autos$wt, autos$mpg,
main = "Diagrama de Dispersión de MPG vs Peso",
xlab = "Peso del Vehículo (1000 lbs)",
ylab = "Millas por Galón (MPG)",
pch = 19,  # Tipo de punto, 19 es un círculo sólido
col = "blue")  # Color de los puntos
autos = cars
plot(autos$wt, autos$mpg,
main = "Diagrama de Dispersión de MPG vs Peso",
xlab = "Peso del Vehículo (1000 lbs)",
ylab = "Millas por Galón (MPG)",
pch = 19,  # Tipo de punto, 19 es un círculo sólido
col = "blue")  # Color de los puntos
autos = cars
# Usar pairs()
pairs(autos, main = "Matriz de Diagramas de Dispersión de mtcars")
# Usar GGally::ggpairs()
install.packages("GGally")
library(GGally)
ggpairs(autos, title = "Matriz de Diagramas de Dispersión de mtcars")
View(autos)
plot(autos$speed, autos$dist,
xlab = "Velocidad",
ylab = "Distancia de frenado",
main = "Diagrama de Dispersión")
velocidad = autos$speed
distancia = autos$dist
auxiliar1 = solve(t(velocidad)%*%velocidad)
auxiliar2 = t(velocidad) %*% distancia
estimador = auxiliar1 %*% auxiliar2
model <- lm(dist ~ speed, data = autos)
summary(model)
coeficientes <- coef(modelo)
modelo <- lm(dist ~ speed, data = autos)
summary(model)
coeficientes <- coef(modelo)
b0 <- coeficientes[1]
b1 <- coeficientes[2]
# Graficar la recta de mínimos cuadrados sobre el gráfico anterior
abline(modelo, col = "blue")
# Obtener los valores predichos
predicciones <- predict(modelo)
# Superponer los puntos predichos en color naranja
points(autos$speed, predicciones, col = "orange", pch = 19)
# Calcular los residuos del modelo
residuos <- residuals(modelo)
# Calcular el error cuadrático medio de los residuos
MSE <- sum(residuos^2) / modelo$df.residual
MSE
# Ajustar el modelo polinomial de segundo grado
modelo_polinomial <- lm(dist ~ speed + I(speed^2), data = autos)
# Obtener los valores predichos del modelo polinomial
predicciones_polinomial <- predict(modelo_polinomial)
# Graficar la curva polinomial sobre el gráfico realizado en el ítem b)
plot(autos$speed, autos$dist, xlab = "Velocidad (mph)", ylab = "Distancia de frenado (pies)", main = "Diagrama de dispersión de Velocidad vs Distancia de frenado")
abline(modelo, col = "blue")
points(autos$speed, predicciones, col = "orange", pch = 19)
# Graficar la curva polinomial en color rojo
# Calcular los residuos del modelo
residuos <- residuals(modelo)
# Calcular el error cuadrático medio de los residuos
MSE <- sum(residuos^2) / modelo$df.residual
MSE
# Ajustar el modelo polinomial de segundo grado
modelo_polinomial <- lm(dist ~ speed + I(speed^2), data = autos)
# Obtener los valores predichos del modelo polinomial
predicciones_polinomial <- predict(modelo_polinomial)
# Graficar la curva polinomial sobre el gráfico realizado en el ítem b)
plot(autos$speed, autos$dist, xlab = "Velocidad (mph)", ylab = "Distancia de frenado (pies)", main = "Diagrama de dispersión de Velocidad vs Distancia de frenado")
abline(modelo, col = "blue")
points(autos$speed, predicciones, col = "orange", pch = 19)
# Graficar la curva polinomial en color rojo
lines(autos$speed, predicciones_polinomial, col = "red", lwd = 2)
setwd("~/Estadística/Guía 6")
datos <- read.table("bajoPeso.txt",header=TRUE)
head(datos)
plot(datos$apgar5, datos$presSist,
xlab = "Apgar",
ylab = "Presión Sistólica",
main = "Diagrama de Dispersión: Apgar vs Presión Sistólica")
plot(datos$edadG, datos$presSist,
xlab = "Edad",
ylab = "Presión Sistólica",
main = "Diagrama de Dispersión: Edad vs Presión Sistólica")
modelo_1 <- lm(presSist ~ edadG + apgar5, data = datos)
summary(modelo_1)
x_0 = c(1,31,7)
prediccion_estimada <- sum(modelo_1$coefficients*x_0)
prediccion_estimada
x_1 = c(1,35,8)
prediccion_estimada <- sum(modelo_1$coefficients*x_1)
prediccion_estimada
x_1 = c(1,32,8)
prediccion_estimada <- sum(modelo_1$coefficients*x_1)
prediccion_estimada
X <- cbind(rep(1,100),datos$edadG, datos$apgar5)
n <- nrow(X)
p <- ncol(X)
S <- summary(modelo_1)$sigma
aux <- qt(0.975, n-p)*S*sqrt(x_0%*%solve(t(X)%*%X)%*%x_0)
lim_inferior <- prediccion_estimada-aux[1]
lim_superior <- prediccion_estimada+aux[1]
c(lim_inferior ,lim_superior)
nuevo_dato <- data.frame(edadG = 31, apgar5 = 7)
prediccion <- predict(modelo_1, newdata = nuevo_dato, interval = "confidence", level = 0.95)
prediccion
Xt.X<- t(model.matrix(modelo_1))%*%model.matrix(modelo_1)
solve(Xt.X)
A<-matrix(rep(0,6), nrow = 2, ncol = 3)
A[1,2]=A[2,3]=1
A
betas_estimados<- modelo_1$coefficients
beta_estrella <- A%*%betas_estimados
CovMat<- (summary(modelo_1)$sigma^2)*A%*%solve(Xt.X)%*%t(A)
CovMat
t(beta_estrella)%*%(solve(CovMat))%*%(beta_estrella)/2
summary(modelo_1)
X <- cbind(rep(1,100), datos$edadG, datos$ apgar5) # X es la matriz de diseño
n <- nrow(X)
p <- ncol(X)
matriz_Covarianza <- summary(modelo_1)$sigma^2*solve(t(X)%*%X)
lim_inferior <- -qt(0.975,n-p)*sqrt(matriz_Covarianza[2,2]) + modelo_1$coefficients[2]
lim_superior <-  qt(0.975,n-p)*sqrt(matriz_Covarianza[2,2]) + modelo_1$coefficients[2]
c(lim_inferior ,lim_superior)
confint(modelo_1, "edadG", level = 0.95)
1 -pt(0.225)
1 -pt(0.225, 41)
qchist(20, 0.95)
qchisq(0.95, 20)
pchisq(0.95, 20)
qchisq(0.05, 20)
1 - pchisq(3.92, 20)
pchisq(3.92, 20)
1 -pnorm(1.79)
qnorm(-1.19)
pnorm(-1.19)
qchisq(0.05, 20)
qchisq(0.95, 20)
